/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.
 
The Initial Developer is Sensia Software LLC. Portions created by the Initial
Developer are Copyright (C) 2014 the Initial Developer. All Rights Reserved.
 
******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.api.persistence;

import java.io.InputStream;
import java.io.OutputStream;
import org.sensorhub.api.module.IModule;


public interface IStorageModule<ConfigType extends StorageConfig> extends IModule<ConfigType>
{


    /**
     * Backups storage to specified output stream
     * @param os
     */
    public void backup(OutputStream os);


    /**
     * Restores storage from backup obtained from specified input stream
     * @param is
     */
    public void restore(InputStream is);


    /**
     * Changes the storage behavior on record insertion, update or deletion
     * @param autoCommit true to commit changes automatically when a transactional method is called,
     * false if the commit() method should be called manually to persist changes to storage. 
     */
    public void setAutoCommit(boolean autoCommit);


    /**
     * Retrieves auto-commit state
     * @return true if auto-commit is enabled on this storage
     */
    public boolean isAutoCommit();


    /**
     * Commits all changes generated by transactional methods since the last commit event
     */
    public void commit();


    /**
     * Cancels all changes generated by transactional methods since the last commit event
     */
    public void rollback();
    
    
    /**
     * Synchronizes storage with another storage of the same type (potentially remote)
     * @param storage
     */
    public void sync(IStorageModule<?> storage);

}